<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.culture.demo.mapper.TeacherMapper">
	
	<!-- TEACHER 테이블에 추가
	public int insertTeacher(Map<String, Object> submitList); -->
	<insert id="insertTeacher" parameterType="hashMap">
		INSERT INTO TEACHER
			(MEMBER_SQ, BUSINESS_TP_ID, TAX_FREE_AV, PROFIL_IMG, TEACHER_NM, TEL, 
			BIRTH_DT, LUNAR_SOLAR, EMAIL, TEACHER_INTRO, ZIPCODE, ADDRESS, ADDR_DETAIL)
		VALUES	
			(${memberSq}, ${submitList.tcTpCd},
			<choose>			
				<when test='submitList.txfrBizprYn != null and submitList.txfrBizprYn == "01"'> 'Y'</when>
				<otherwise> 'N'</otherwise>	
			</choose>			
				,#{teacherImg}, #{submitList.tcNm}, '${submitList.hpStNo}${submitList.hpMidNo}${submitList.hpLastNo}', TO_DATE(${submitList.bday}, 'YYMMDD'),
			<choose>
				<when test='submitList.lscCd != null and submitList.lscCd == "01"'> 'lunar'</when>
				<otherwise> 'solar'</otherwise>				
			</choose>
				,'${submitList.email}@${submitList.emailAddrCd}', #{submitList.selfIntrdnCont}, #{submitList.pstno}, #{submitList.addr}, #{submitList.dtlAddr}
			)		
	</insert>
	
	<!-- AWARDS 테이블에 추가
	public int insertAwards(List<TeacherDTO.TcawrdList> tcawrdList); -->
	<insert id="insertAwards" parameterType="java.util.List">
		<selectKey order="BEFORE"  resultType="Integer"  keyProperty="seq">
		    SELECT NVL(MAX(TO_NUMBER(AWARDS_SQ))+1,1) AS "AWARDS_SQ"
		    FROM AWARDS
         </selectKey> 
			INSERT INTO AWARDS
				(AWARDS_SQ, MEMBER_SQ, PUBLISHER, AWARDS_HISTORY, AWARDS_DT)			
			VALUES
		<foreach collection="tcawrdList" index="index" item="item" open="" close="" separator="">
			(#{seq}, ${memberSq}, #{item.issueAgncNm}, #{item.issueNm}, #{item.issueDt})
		</foreach>
	</insert>

	<!-- CARRER 테이블에 추가
	public int insertCarrer(List<TeacherDTO.TchistList> tchistList); -->
	<insert id="insertCarrer" parameterType="java.util.List">
		<selectKey order="BEFORE"  resultType="String"  keyProperty="seq">
		    SELECT NVL(MAX(TO_NUMBER(CAREER_SQ))+1,1) AS "CAREER_SQ"
		    FROM CAREER
         </selectKey>
		INSERT INTO CAREER
			(CAREER_SQ, MEMBER_SQ, PUBLISHER, START_DT, END_DT)
		VALUES
		<foreach collection="tcawrdList" index="index" item="item" open="" close="" separator="">
			(#{seq}, ${memberSq}, #{item.histPlcNm}, #{item.histStDt}, #{item.histEndDt})
		</foreach>
	</insert>
	
	<!-- CERTIFICATE 테이블에 추가
	public int insertCertificate(List<TeacherDTO.TcauthctfList> tcauthctfList); -->
	<insert id="insertCertificate">
		<selectKey order="BEFORE"  resultType="String"  keyProperty="seq">
		    SELECT NVL(MAX(TO_NUMBER(CERTIFICATE_SQ))+1,1) AS "CERTIFICATE_SQ"
		    FROM CERTIFICATE
         </selectKey>
		INSERT INTO CERTIFICATE
			(CERTIFICATE_SQ, MEMBER_SQ, PUBLISHER, CERTIFICATE_NM, ACQUISITION_DT)
		VALUES
		<foreach collection="tcawrdList" index="index" item="item" open="" close="" separator="">
			(#{seq}, ${memberSq}, #{item.issueAgncNm}, #{item.issueNm}, #{item.issueDt})
		</foreach>
	</insert>
	
	<!-- EDUCATION 테이블에 추가
	public int insertEducation(List<TeacherDTO.TceduList> tceduList); -->
	<insert id="insertEducation">
		<selectKey order="BEFORE"  resultType="String"  keyProperty="seq">
		    SELECT NVL(MAX(TO_NUMBER(EDUCATION_SQ))+1,1)  AS "EDUCATION_SQ"
		    FROM EDUCATION
         </selectKey> 
			INSERT INTO EDUCATION
				(EDUCATION_SQ, MEMBER_SQ, UNIVERSITY_TP_ID, UNIVERSITY_NM, MAJOR, GRADUATE_STATE_ID, GRADUATE_YEAR)
		<foreach collection="tcawrdList" index="index" item="item" open="" close="" separator="">
			VALUES
				(#{seq}, ${memberSq}, ${item.schlClCd}, #{item.schlNm}, #{item.mjrNm}, ${item.grdtClCd}, #{item.yy})
		</foreach>
	</insert>
	
	<!-- APPLY_CLASS 테이블에 추가
	public int insertApplyClass(Map<String, Object> submitList); -->
	<insert id="insertApplyClass" parameterType="hashMap" >
	    INSERT INTO APPLY_CLASS
		    (MEMBER_SQ, CLASS_REQ_DT, CLASS_CONTENT, HOPE_ST_TIME, HOPE_EN_TIME, 
		    MDCLSCTEGRYCD1, MDCLSCTEGRYCD2, HOPE_BRANCH_ID1, HOPE_BRANCH_ID2, 
		    SUN_AV, MON_AV, TUE_AV, WED_AV, THU_AV, FRI_AV, SAT_AV)
	    VALUES
		    (${memberSq}, SYSDATE, #{submitList.lectIntrdnCont}, '${submitList.hopeStHh}${submitList.hopeStMi}', '${submitList.hopeEndHh}${submitList.hopeEndMi}', 
		    #{submitList.frstMdclsCtegryCd}, #{submitList.secMdclsCtegryCd}, ${submitList.frstHopeBrchCd}, ${submitList.secHopeBrchCd},
        <foreach collection="resultList" item="item" separator="," index="index">
        	#{item}
        </foreach>
    	)
	</insert>
	
	<!-- APPLY_CLASS 중복 지원 확인
	public int duplicateApplicaionCheck(int memberSq); -->
	<select id="duplicateApplicaionCheck" resultType="String">
		SELECT CASE
				WHEN EXISTS (SELECT 1 FROM APPLY_CLASS WHERE member_sq = #{value})
				THEN 'Y'
				ELSE 'N'
				END AS result
		FROM dual
	</select>
	
	<!-- TEACHER 테이블에 중복 지원 확인
	public String duplicateTeacherCheck(int memberSq); -->
	<select id="duplicateTeacherCheck" resultType="String">
		SELECT CASE
				WHEN EXISTS (SELECT 1 FROM TEACHER WHERE member_sq = #{value})
				THEN 'Y'
				ELSE 'N'
				END AS result
		FROM dual
	</select>
	
	<!-- APPLY_CLASS에 없고 TEACHER에 있는지 확인 //teacher 테이블에만 있으면 Y 그외 N
	public String noApplyClassOkTeacher(int memberSq); -->
	<select id="noApplyClassOkTeacher" resultType="String">
		SELECT 
		  CASE
		    WHEN EXISTS (SELECT 1 FROM TEACHER WHERE member_sq = #{memberSq})
		     AND NOT EXISTS (SELECT 1 FROM APPLY_CLASS WHERE member_sq = #{memberSq}) THEN 'Y'
		    ELSE 'N'
		  END AS result
		FROM DUAL
	</select>
	
	<!--temporary_teacherApplication 임시저장글 테이블에 저장되어 있는 회원인지 확인// 있으면 Y 없으면 N
	public String temporaryOk(int memberSq); -->
	<select id="temporaryOk" resultType="String">
		SELECT 
        CASE WHEN EXISTS (SELECT 1 
                          FROM temporary_teacherApplication 
                          WHERE member_sq = #{value}) 
        THEN 'Y' ELSE 'N' END AS result
   		 FROM dual
	</select>
	
	
	<!--APPLY_CLASS 테이블과 TEACHER 테이블 동시에 있는 회원인지 확인//둘다있으면 Y 없으면 n
	public String applyTeacher(int memberSq); -->
	<select id="applyTeacher" resultType="String">
		SELECT 
		  CASE WHEN MAX(CASE WHEN t.member_sq IS NOT NULL THEN 1 ELSE 0 END) = 1 
		            AND MAX(CASE WHEN ac.member_sq IS NOT NULL THEN 1 ELSE 0 END) = 1 
		       THEN 'Y' 
		       ELSE 'N' 
		  END AS result
		FROM teacher t FULL OUTER JOIN apply_class ac ON t.member_sq = ac.member_sq
		WHERE t.member_sq = #{value}
	</select>
	
	<!-- //임시저장 테이블에 임시저장
	public int saveTeacherInfo(@Param("saveDataList") Map<String, Object> saveDataList, @Param("teacherImg") String teacherImg, @Param("memberSq") int memberSq);
	 -->
	<update id="saveTeacherInfo" parameterType="hashMap">
	    MERGE INTO TEMPORARY_TEACHERAPPLICATION t
	    USING DUAL
	    ON (t.MEMBER_SQ = #{memberSq})
	    WHEN MATCHED THEN
	        UPDATE SET
	            IMGPRE = #{teacherImg},
	            PRINFCLCTAGRYN = '${saveDataList.prinfClctAgrYn}',
	            CARRINFOCLCTAGRYN = '${saveDataList.carrInfoClctAgrYn}',
	            TCTPCD = #{saveDataList.tcTpCd},
	            TCNM = #{saveDataList.tcNm},
	            LSCCD = #{saveDataList.lscCd},
	            BDAY = TO_DATE(#{saveDataList.bday}, 'YYMMDD'),
	            HPSTNO = #{saveDataList.hpStNo},
	            HPMIDNO = #{saveDataList.hpMidNo},
	            HPLASTNO = #{saveDataList.hpLastNo},
	            EMAIL = #{saveDataList.email},
	            EMAILADDRCD = #{saveDataList.emailAddrCd},
	            PSTNO = #{saveDataList.pstno},
	            ADDR = #{saveDataList.addr},
	            DTLADDR = #{saveDataList.dtlAddr},
	            SELFINTRDNCONT = #{saveDataList.selfIntrdnCont},
	            FRSTHOPEBRCHCD = #{saveDataList.frstHopeBrchCd},
	            FRSTHOPEBRCHCDNM = #{saveDataList.frstHopeBrchCdNm},
	            SECHOPEBRCHCD = #{saveDataList.secHopeBrchCd},
	            SECHOPEBRCHCDNM = #{saveDataList.secHopeBrchCdNm},
	            FRSTLRCLSCTEGRYCD = #{saveDataList.frstLrclsCtegryCd},
	            FRSTLRCLSCTEGRYCDNM = #{saveDataList.frstLrclsCtegryCdNm},
	            FRSTMDCLSCTEGRYCD = #{saveDataList.frstMdclsCtegryCd},
	            SECLRCLSCTEGRYCD = #{saveDataList.secLrclsCtegryCd},
	            SECLRCLSCTEGRYCDNM = #{saveDataList.secLrclsCtegryCdNm},
	            SECMDCLSCTEGRYCD = #{saveDataList.secMdclsCtegryCd},
	            HOPEDAYWVAL = #{saveDataList.hopeDaywVal},
	            HOPEDAYWVALNM = #{saveDataList.hopeDaywValNm},
	            HOPESTHH = #{saveDataList.hopeStHh},
	            HOPESTMI = #{saveDataList.hopeStMi},
	            HOPEENDHH = #{saveDataList.hopeEndHh},
	            HOPEENDMI = #{saveDataList.hopeEndMi},
	            LECTINTRDNCONT = #{saveDataList.lectIntrdnCont},
				TXFRBIZPRYN = 
				<if test="saveDataList.txfrBizprYn != null">
				    #{saveDataList.txfrBizprYn}
				</if>
				<if test="saveDataList.txfrBizprYn == null">
				    'null'
				</if>
	    WHEN NOT MATCHED THEN
	        INSERT (
	            IMGPRE, MEMBER_SQ, PRINFCLCTAGRYN, CARRINFOCLCTAGRYN,
	            TCTPCD, TCNM, LSCCD, BDAY, HPSTNO, HPMIDNO, HPLASTNO, EMAIL,
	            EMAILADDRCD, PSTNO, ADDR, DTLADDR, SELFINTRDNCONT, FRSTHOPEBRCHCD,
	            FRSTHOPEBRCHCDNM, SECHOPEBRCHCD, SECHOPEBRCHCDNM,
	            FRSTLRCLSCTEGRYCD, FRSTLRCLSCTEGRYCDNM, FRSTMDCLSCTEGRYCD,
	            SECLRCLSCTEGRYCD, SECLRCLSCTEGRYCDNM, SECMDCLSCTEGRYCD,
	            HOPEDAYWVAL, HOPEDAYWVALNM, HOPESTHH, HOPESTMI,
	            HOPEENDHH, HOPEENDMI, LECTINTRDNCONT, TXFRBIZPRYN
	        ) VALUES (
	            #{teacherImg}, #{memberSq}, '${saveDataList.prinfClctAgrYn}', '${saveDataList.carrInfoClctAgrYn}',
	            #{saveDataList.tcTpCd}, #{saveDataList.tcNm}, #{saveDataList.lscCd}, TO_DATE(#{saveDataList.bday}, 'YYMMDD'),
	            #{saveDataList.hpStNo}, #{saveDataList.hpMidNo}, #{saveDataList.hpLastNo}, #{saveDataList.email},
	            #{saveDataList.emailAddrCd}, #{saveDataList.pstno}, #{saveDataList.addr}, #{saveDataList.dtlAddr}, #{saveDataList.selfIntrdnCont},
	            #{saveDataList.frstHopeBrchCd}, #{saveDataList.frstHopeBrchCdNm}, #{saveDataList.secHopeBrchCd}, #{saveDataList.secHopeBrchCdNm},
	            #{saveDataList.frstLrclsCtegryCd}, #{saveDataList.frstLrclsCtegryCdNm}, #{saveDataList.frstMdclsCtegryCd},
	            #{saveDataList.secLrclsCtegryCd}, #{saveDataList.secLrclsCtegryCdNm}, #{saveDataList.secMdclsCtegryCd},
	            #{saveDataList.hopeDaywVal}, #{saveDataList.hopeDaywValNm}, #{saveDataList.hopeStHh}, #{saveDataList.hopeStMi},
	            #{saveDataList.hopeEndHh}, #{saveDataList.hopeEndMi}, #{saveDataList.lectIntrdnCont},          
				<if test="saveDataList.txfrBizprYn != null">
				    #{saveDataList.txfrBizprYn}
				</if>
				<if test="saveDataList.txfrBizprYn == null">
				    'null'
				</if>
	        )
	</update>

	<!-- 임시저장 테이블 삭제
	public void deleteTeacherInfo(int memberSq); -->
	<delete id="deleteTeacherInfo">
		DELETE FROM TEMPORARY_TEACHERAPPLICATION
   		WHERE MEMBER_SQ = #{memberSq}
	</delete>

	<!-- 임시저장 글 불러오기
	public TeacherDTO saveOpen(int memberSq); -->
	<select id="saveOpen" resultType="com.culture.demo.domain.TeacherDTO">
		SELECT *
		FROM TEMPORARY_TEACHERAPPLICATION
		WHERE member_sq = #{memberSq}
	</select>	
</mapper>