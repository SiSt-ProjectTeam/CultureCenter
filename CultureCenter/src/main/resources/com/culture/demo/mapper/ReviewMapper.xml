<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.culture.demo.mapper.ReviewMapper">
	
	<!-- 후기 목록조회 -->
	
	<select id="getReviewList" parameterType="map" resultType="com.culture.demo.domain.ReviewDTO">
SELECT * 
FROM (
    SELECT COUNT(DISTINCT review_sq) OVER() tot_cnt
    		, DENSE_RANK() OVER(ORDER BY review_sq) rank
    		, r.review_content, r.member_sq, r.review_sq, b.branch_tp_id, b.branch_id, b.branch_nm, r.review_title, c.class_id, c.class_nm, 
           CASE  
               WHEN LENGTH(m.name) = 2 THEN  
                   SUBSTR(m.name, 1, 1) || '*'  
               ELSE  
                   SUBSTR(m.name, 1, 1) || LPAD('*', LENGTH(m.name) - 2, '*') || SUBSTR(m.name, LENGTH(m.name), 1)  
           END AS name, TO_CHAR(r.date_writingout_dt, 'YYYY.MM.DD')AS date_writingout_dt, r.comment_cnt, r.rating, cbs.open_smst_id, c.class_img
           , EXTRACT(YEAR FROM date_writingout_dt) writing_year, t.member_sq AS teacher_sq, cbs.class_semester_sq
    FROM review r 
    LEFT JOIN detail_class d ON r.detail_class_sq = d.detail_class_sq 
    JOIN class_by_semester cbs ON d.class_semester_sq = cbs.class_semester_sq 
    JOIN class c ON cbs.class_id = c.class_id 
    JOIN member m ON r.member_sq = m.member_sq 
    JOIN branch b ON c.branch_id = b.branch_id
    JOIN teacher t ON c.member_sq = t.member_sq 
    <where>

            <if test="branch_id != null and branch_id != 0">
           		 AND b.branch_id = #{branch_id}
            </if>
            <if test="dto.q != null and dto.q != '' ">
                 AND (review_title LIKE '%' || #{dto.q} || '%' OR review_content LIKE '%' || #{dto.q} || '%')
            </if>
     </where>        
            <if test="dto.orderSet == 'A'">   
            	ORDER BY date_writingout_dt DESC 
            </if>
                  		
         	<if test="dto.orderSet == 'B'">
            	ORDER BY rating DESC         				
         	</if>   
         ) a  
         <![CDATA[
         WHERE (#{dto.pageIndex}-1)*#{dto.listCnt} + 1 <= rank AND rank <= #{dto.pageIndex}*#{dto.listCnt}
      	]]>
	</select>
	
	<!-- 수강후기 상세페이지 -->
	<select id="dtlReview" parameterType="map" resultType = "com.culture.demo.domain.ReviewDTO">
		SELECT  CASE 
    		        WHEN LENGTH(u.name) = 2 THEN SUBSTR(u.name, 1, 1) || '*' 
           		 ELSE SUBSTR(u.name, 1, 1) || LPAD('*', LENGTH(u.name) - 2, '*') || SUBSTR(u.name, LENGTH(u.name), 1) 
        		END AS name, r.member_sq AS memberNo,
        		TO_CHAR(date_writingout_dt, 'YYYY') AS yy, TO_CHAR(date_writingout_dt, 'YYYY.MM.DD')AS date_writingout_dt, r.review_sq, review_title, rating, review_img, review_content, t.member_sq AS teacher_sq,
        		c.class_img, c.class_st_id,a.class_st, lrclsctegry, mdclsctegry, c.class_nm, b.branch_id, b.branch_nm, t.teacher_nm, e.smst_nm, TO_CHAR(cbs.schedule_start_dt, 'YYYY.MM.DD')AS schedule_start_dt,TO_CHAR(cbs.schedule_end_dt, 'YYYY.MM.DD')schedule_end_dt
		FROM review r LEFT JOIN review_comm rc ON r.member_sq = rc.member_sq
              		  LEFT JOIN detail_class dc ON r.detail_class_sq = dc.detail_class_sq
                   		   JOIN class_by_semester cbs ON dc.class_semester_sq = cbs.class_semester_sq
                   		   JOIN class c ON cbs.class_id = c.class_id
                   		   JOIN member u ON r.member_sq = u.member_sq
                   		   JOIN class_type p ON c.class_type_id = p.class_type_id
                   		   JOIN class_state a ON c.class_st_id = a.class_st_id
                   		   JOIN branch b ON c.branch_id = b.branch_id
                   		   JOIN teacher t ON c.member_sq = t.member_sq
                   		   JOIN semester e ON cbs.open_smst_id = e.open_smst_id
                   		   JOIN medium_category m ON p.mdclsctegrycd = m.mdclsctegrycd
                   		   JOIN large_category l ON p.lrclsctegrycd = l.lrclsctegrycd
	WHERE b.branch_id = #{brchCd} AND TO_CHAR(date_writingout_dt, 'YYYY') = #{yy} AND cbs.open_smst_id = #{lectSmsterCd}
                     		  AND dc.detail_class_sq = #{lectCd} AND t.member_sq = #{tcCdNo} AND r.member_sq = #{memberNo}
	</select>
	
	<!-- 수강후기 댓글 -->
	<select id="getCommtList" parameterType="map" resultType = "com.culture.demo.domain.ReviewDTO">
SELECT *
FROM (
        SELECT COUNT(DISTINCT comment_sq) OVER() tot_cnt
             , DENSE_RANK() OVER(ORDER BY comment_sq DESC) rank
             , CASE WHEN LENGTH(m.name) = 2 
            	    THEN SUBSTR(m.name, 1, 1) || '*' 
               ELSE SUBSTR(m.name, 1, 1) || LPAD('*', LENGTH(m.name) - 2, '*') || SUBSTR(m.name, LENGTH(m.name), 1) END AS name
               , TO_CHAR(rc.write_dt, 'YYYY.MM.DD') AS write_dt, comment_content, r.teacher_member_sq AS teacher_sq, r.member_sq, dc.detail_class_sq, cbs.open_smst_id, b.branch_id, comment_sq, rc.member_sq AS comm_member_sq
        FROM review_comm rc LEFT JOIN review r ON r.review_sq = rc.review_sq
                            LEFT JOIN member m ON rc.member_sq = m.member_sq
                            LEFT JOIN detail_class dc ON dc.detail_class_sq = r.detail_class_sq
                            LEFT JOIN class_by_semester cbs ON dc.class_semester_sq = cbs.class_semester_sq
                            LEFT JOIN class c ON c.class_id = cbs.class_id
                            LEFT JOIN branch b ON b.branch_id = c.branch_id
                            LEFT JOIN teacher t ON t.member_sq = m.member_sq

       	WHERE b.branch_id = #{dto.brchCd}
                AND TO_CHAR(r.date_writingout_dt, 'YYYY')= #{dto.yy}
                AND cbs.open_smst_id = #{dto.lectSmsterCd}
                AND dc.detail_class_sq = #{dto.lectCd}
    			AND r.teacher_member_sq = #{dto.tcCdNo}
				AND r.member_sq = #{dto.memberNo}
		ORDER BY rank ASC
    )
	<![CDATA[
         WHERE (#{dto.pageIndex}-1)*#{dto.listCnt} + 1 <= rank AND rank <= #{dto.pageIndex}*#{dto.listCnt}
    ]]>

	</select>


	<!-- 후기댓글 등록-->
	<insert id="insertComm" parameterType="map">
		INSERT INTO review_comm (comment_sq, review_sq, member_sq, write_dt, comment_content)
		VALUES (seq_comment.NEXTVAL, #{review_sq}, #{member_sq}, SYSDATE, #{cmntCont1, jdbcType=CLOB})
	</insert>
	
	<!-- 후기댓글 삭제 -->
	<delete id="deleteComm">
		DELETE FROM review_comm
		WHERE comment_sq= #{sortSeqno} 
	</delete>
</mapper>